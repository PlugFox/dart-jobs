syntax = "proto3";

package job;

import "google/protobuf/timestamp.proto";
import "common.proto";

/// Сервис отвечающий за взаимодействие с работами
service JobService {
  /// Получение последних записей по указаной фильтрации
  /// клиент в момент подписки получает все удовлетворяющее его отбору
  /// и подписывается на дальнейшее получение данных
  rpc ListenRecent(JobFilter) returns (stream JobsChunk) {}

  /// Получение последних записей по указаной фильтрации
  rpc GetRecent(JobFilter) returns (JobsChunk) {}

  /// Получение последних записей по указаной фильтрации
  rpc Paginate(JobFilter) returns (JobsChunk) {}

  /// Создать новую работу
  /// В ответ получаем созданую работу
  rpc CreateJob(JobData) returns (Job) {}

  /// Получить обновленные данные по работе
  /// по её идентификатору
  /// В ответ получаем созданую работу
  rpc GetJob(common.UUID) returns (Job) {}

  /// Обновить данные по работе
  /// В ответ получаем обновленную работу
  rpc UpdateJob(Job) returns (Job) {}

  /// Удалить работу
  rpc DeleteJob(Job) returns (Job) {}
}

/// Фильтр для отбора сообщений
message JobFilter {
  /// Включать в выборку с пометкой на удаление
  /// false - только существующие (по умолчанию)
  /// true - существующие и помеченные на удаленние
  optional bool deletionMarkIncluded = 1;

  /// Ожидаемое количество
  /// Если не указано - 100
  optional uint32 limit = 2;

  /// Указатель отбора
  /// Для [GetRecent] и [ListenRecent] используется - after
  /// Для [Paginate] используется - before
  oneof cursor {
    /// Создано до
    /// Для [Paginate]
    google.protobuf.Timestamp before = 3;

    /// Создано после
    /// Для [GetRecent] и [ListenRecent]
    google.protobuf.Timestamp after = 4;
  }
}

/// Кусок коллекции работ
message JobsChunk {
  /// Это последний кусок коллекции по указаному отбору
  /// Если true - значит по указаному запросу больше нечего получать
  bool endOfList = 1;

  /// Список с работами
  repeated Job jobs = 2;
}

/// Работа
message Job {
  /// Идентификатор элемента
  string id = 1;

  /// Идентификатор создателя
  string creatorId = 2;

  /// Вес элемента (влияет на сортировку)
  uint64 weight = 3;

  /// Создано
  google.protobuf.Timestamp created = 4;

  /// Обновлено
  google.protobuf.Timestamp updated = 5;

  reserved 6 to 100;

  /// Данные работы
  JobData data = 101;

  reserved 102 to 200;

  /// Пометка на удаление
  /// Если false - существует
  /// Если true - помечена на удаление
  bool deletionMark = 201;
}

/// Работа / данные работы
message JobData {
  /// Заголовок
  /// Максимальная длина - 64 символов
  /// Поле ввода
  string title = 1;

  /// Компания, например: Horns and hooves
  /// Максимальная длина - 64 символов
  /// Поле ввода
  string company = 2;

  /// Местоположение, например: Russia
  /// Максимальная длина - 64 символов
  /// Выпадающее поле выбора
  string country = 3;

  /// Удаленная работа?
  /// Переключатель
  bool remote = 4;

  /// Местоположение, например: Moscow
  /// Максимальная длина - 64 символов
  /// Поле ввода
  string address = 5;

  /// Описания на различных языках
  /// Ключ - локаль, например "en" или "ru"
  /// Максимальная длина - 2600 символов для каждого значения
  /// Значение - описание
  map<string, string> descriptions = 6;

  /// Уровень разработчика (Developer level)
  /// Чекбоксы, Chips
  repeated DeveloperLevel levels = 7;

  /// Навыки (Skills)
  /// Поля ввода
  repeated Skill skills = 8;

  /// Контакты для обратной связи (Contacts)
  /// Емейл, Сайт, Телефон, Различные мессенджеры
  /// Поля ввода
  repeated Contact contacts = 9;

  /// Трудоустройство, занятость (Employment)
  /// Полный рабочий день, Частичная занятость, Одноразовая работа, Работа по контракту,
  /// Участие в опенсорс проекте, Поиск команды или сотрудничество
  /// Чекбоксы, Chips
  repeated Employment employment = 10;

  /// Тэги (Tags)
  /// Поле ввода
  repeated string tags = 11;
}

/// Уровень разработчика
enum DeveloperLevel {
  /// Средний
  MIDDLE = 0;

  /// Стажёр
  INTERN = 1;

  /// Младший
  JUNIOR = 2;

  /// Старший
  SENIOR = 3;

  /// Ведущий
  LEAD = 4;
}

/// Занятость
enum Employment {
  /// Полный рабочий день (Full-time employment)
  FULL_TIME = 0;

  /// Частичная занятость (Part-time employment)
  PART_TIME = 1;

  /// Одноразовая работа (one-time job)
  ONE_TIME = 2;

  /// Работа по контракту (Contract job)
  CONTRACT = 3;

  /// Участие в опенсорс проекте (Open source project)
  OPEN_SOURCE = 4;

  /// Поиск команды или сотрудничество (Team search or collaboration)
  COLLABORATION = 5;
}

/// Навык (Skill)
/// Язык, фреймвок, пакет
message Skill {
  /// Значение
  string value = 1;

  /// Вид навыка
  SkillType type = 2;

  /// Виды навыков
  enum SkillType {
    /// Неопределено, не получено или не указано, другое (Other / Unknown)
    OTHER = 0;
  }
}

/// Контакт для обратной связи (Contact)
/// Емейл, Сайт, Телефон, Различные мессенджеры и тп и тд
message Contact {
  /// Значение
  string value = 1;

  /// Вид контакта
  ContactType type = 2;

  /// Виды контактов
  enum ContactType {
    /// Неопределено, не получено или не указано (Unknown)
    OTHER = 0;

    /// Телефон
    PHONE = 1;

    /// Сайт
    WEBSITE = 2;

    /// Почта
    EMAIL = 3;

    /// Телеграм
    TELEGRAM = 4;
  }
}
