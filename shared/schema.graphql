# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"whether this query should be cached (Hasura Cloud only)"
directive @cached(
    "refresh the cache entry"
    refresh: Boolean! = false,
    "measured in seconds"
    ttl: Int! = 60
) on QUERY

"""

Список стран


columns and relationships of "country"
"""
type country {
    "Двухсимвольный код страны"
    code: bpchar!
    "Идентификатор страны"
    id: Int!
    "Приблизительная широта"
    latitude: Float!
    "Приблизительная долгота"
    longitude: Float!
    "Имя страны на английском"
    title: String!
}

"""

Список работ


columns and relationships of "job"
"""
type job {
    "Местоположение, например: Moscow"
    address: String!
    "Компания"
    company: String!
    "An object relationship"
    country: country
    "Код страны"
    country_code: bpchar!
    "Создание"
    created: timestamp!
    "Идентификатор пользователя из ID token фаербейза"
    creator_id: String!
    "Пометка на удаление"
    deletion_mark: Boolean!
    "An object relationship"
    description_english: job_description_english
    "An object relationship"
    description_russian: job_description_russian
    "Трудоустройство, занятость"
    employments: _employment!
    "Идентификатор элемента"
    id: Int!
    "An object relationship"
    job_contacts: job_contacts
    "An object relationship"
    job_skills: job_skills
    "An array relationship"
    job_tags(
        "distinct select on columns"
        distinct_on: [job_tags_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [job_tags_order_by!],
        "filter the rows returned"
        where: job_tags_bool_exp
    ): [job_tags!]!
    "Уровни разработчика"
    levels: _level!
    "Релокация"
    relocation: relocation!
    "Удаленная"
    remote: Boolean!
    "Имя вакансии"
    title: String!
    "Последнее обновление"
    updated: timestamp!
}

"columns and relationships of \"job_contacts\""
type job_contacts {
    "Контакты для обратной связи"
    contacts: _text!
    "An object relationship"
    job: job!
    "Идентификатор работы"
    job_id: Int!
}

"response of any mutation on the table \"job_contacts\""
type job_contacts_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [job_contacts!]!
}

"columns and relationships of \"job_description_english\""
type job_description_english {
    "Описание"
    description: String!
    "An object relationship"
    job: job!
    "Идентификатор работы"
    job_id: Int!
}

"response of any mutation on the table \"job_description_english\""
type job_description_english_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [job_description_english!]!
}

"columns and relationships of \"job_description_russian\""
type job_description_russian {
    "Описание"
    description: String!
    "An object relationship"
    job: job!
    "Идентификатор работы"
    job_id: Int!
}

"response of any mutation on the table \"job_description_russian\""
type job_description_russian_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [job_description_russian!]!
}

"response of any mutation on the table \"job\""
type job_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [job!]!
}

"columns and relationships of \"job_skills\""
type job_skills {
    "An object relationship"
    job: job!
    "Идентификатор работы"
    job_id: Int!
    "Навыки (Skills)"
    skills: _text!
}

"response of any mutation on the table \"job_skills\""
type job_skills_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [job_skills!]!
}

"columns and relationships of \"job_tags\""
type job_tags {
    "An object relationship"
    job: job!
    "Идентификатор работы"
    job_id: Int!
    "Тэг"
    tag: String!
}

"response of any mutation on the table \"job_tags\""
type job_tags_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [job_tags!]!
}

"mutation root"
type mutation_root {
    "insert data into the table: \"job\""
    insert_job(
        "the rows to be inserted"
        objects: [job_insert_input!]!,
        "on conflict condition"
        on_conflict: job_on_conflict
    ): job_mutation_response
    "insert data into the table: \"job_contacts\""
    insert_job_contacts(
        "the rows to be inserted"
        objects: [job_contacts_insert_input!]!,
        "on conflict condition"
        on_conflict: job_contacts_on_conflict
    ): job_contacts_mutation_response
    "insert a single row into the table: \"job_contacts\""
    insert_job_contacts_one(
        "the row to be inserted"
        object: job_contacts_insert_input!,
        "on conflict condition"
        on_conflict: job_contacts_on_conflict
    ): job_contacts
    "insert data into the table: \"job_description_english\""
    insert_job_description_english(
        "the rows to be inserted"
        objects: [job_description_english_insert_input!]!,
        "on conflict condition"
        on_conflict: job_description_english_on_conflict
    ): job_description_english_mutation_response
    "insert a single row into the table: \"job_description_english\""
    insert_job_description_english_one(
        "the row to be inserted"
        object: job_description_english_insert_input!,
        "on conflict condition"
        on_conflict: job_description_english_on_conflict
    ): job_description_english
    "insert data into the table: \"job_description_russian\""
    insert_job_description_russian(
        "the rows to be inserted"
        objects: [job_description_russian_insert_input!]!,
        "on conflict condition"
        on_conflict: job_description_russian_on_conflict
    ): job_description_russian_mutation_response
    "insert a single row into the table: \"job_description_russian\""
    insert_job_description_russian_one(
        "the row to be inserted"
        object: job_description_russian_insert_input!,
        "on conflict condition"
        on_conflict: job_description_russian_on_conflict
    ): job_description_russian
    "insert a single row into the table: \"job\""
    insert_job_one(
        "the row to be inserted"
        object: job_insert_input!,
        "on conflict condition"
        on_conflict: job_on_conflict
    ): job
    "insert data into the table: \"job_skills\""
    insert_job_skills(
        "the rows to be inserted"
        objects: [job_skills_insert_input!]!,
        "on conflict condition"
        on_conflict: job_skills_on_conflict
    ): job_skills_mutation_response
    "insert a single row into the table: \"job_skills\""
    insert_job_skills_one(
        "the row to be inserted"
        object: job_skills_insert_input!,
        "on conflict condition"
        on_conflict: job_skills_on_conflict
    ): job_skills
    "insert data into the table: \"job_tags\""
    insert_job_tags(
        "the rows to be inserted"
        objects: [job_tags_insert_input!]!,
        "on conflict condition"
        on_conflict: job_tags_on_conflict
    ): job_tags_mutation_response
    "insert a single row into the table: \"job_tags\""
    insert_job_tags_one(
        "the row to be inserted"
        object: job_tags_insert_input!,
        "on conflict condition"
        on_conflict: job_tags_on_conflict
    ): job_tags
    "update data of the table: \"job\""
    update_job(
        "sets the columns of the filtered rows to the given values"
        _set: job_set_input,
        "filter the rows which have to be updated"
        where: job_bool_exp!
    ): job_mutation_response
    "update single row of the table: \"job\""
    update_job_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: job_set_input,
        pk_columns: job_pk_columns_input!
    ): job
    "update data of the table: \"job_contacts\""
    update_job_contacts(
        "increments the numeric columns with given value of the filtered values"
        _inc: job_contacts_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: job_contacts_set_input,
        "filter the rows which have to be updated"
        where: job_contacts_bool_exp!
    ): job_contacts_mutation_response
    "update single row of the table: \"job_contacts\""
    update_job_contacts_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: job_contacts_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: job_contacts_set_input,
        pk_columns: job_contacts_pk_columns_input!
    ): job_contacts
    "update data of the table: \"job_description_english\""
    update_job_description_english(
        "increments the numeric columns with given value of the filtered values"
        _inc: job_description_english_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: job_description_english_set_input,
        "filter the rows which have to be updated"
        where: job_description_english_bool_exp!
    ): job_description_english_mutation_response
    "update single row of the table: \"job_description_english\""
    update_job_description_english_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: job_description_english_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: job_description_english_set_input,
        pk_columns: job_description_english_pk_columns_input!
    ): job_description_english
    "update data of the table: \"job_description_russian\""
    update_job_description_russian(
        "increments the numeric columns with given value of the filtered values"
        _inc: job_description_russian_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: job_description_russian_set_input,
        "filter the rows which have to be updated"
        where: job_description_russian_bool_exp!
    ): job_description_russian_mutation_response
    "update single row of the table: \"job_description_russian\""
    update_job_description_russian_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: job_description_russian_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: job_description_russian_set_input,
        pk_columns: job_description_russian_pk_columns_input!
    ): job_description_russian
    "update data of the table: \"job_skills\""
    update_job_skills(
        "increments the numeric columns with given value of the filtered values"
        _inc: job_skills_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: job_skills_set_input,
        "filter the rows which have to be updated"
        where: job_skills_bool_exp!
    ): job_skills_mutation_response
    "update single row of the table: \"job_skills\""
    update_job_skills_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: job_skills_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: job_skills_set_input,
        pk_columns: job_skills_pk_columns_input!
    ): job_skills
    "update data of the table: \"job_tags\""
    update_job_tags(
        "increments the numeric columns with given value of the filtered values"
        _inc: job_tags_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: job_tags_set_input,
        "filter the rows which have to be updated"
        where: job_tags_bool_exp!
    ): job_tags_mutation_response
}

type query_root {
    "fetch data from the table: \"country\""
    country(
        "distinct select on columns"
        distinct_on: [country_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [country_order_by!],
        "filter the rows returned"
        where: country_bool_exp
    ): [country!]!
    "fetch data from the table: \"country\" using primary key columns"
    country_by_pk(
        "Идентификатор страны"
        id: Int!
    ): country
    "fetch data from the table: \"job\""
    job(
        "distinct select on columns"
        distinct_on: [job_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [job_order_by!],
        "filter the rows returned"
        where: job_bool_exp
    ): [job!]!
    "fetch data from the table: \"job\" using primary key columns"
    job_by_pk(
        "Идентификатор элемента"
        id: Int!
    ): job
    "fetch data from the table: \"job_contacts\""
    job_contacts(
        "distinct select on columns"
        distinct_on: [job_contacts_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [job_contacts_order_by!],
        "filter the rows returned"
        where: job_contacts_bool_exp
    ): [job_contacts!]!
    "fetch data from the table: \"job_contacts\" using primary key columns"
    job_contacts_by_pk(
        "Идентификатор работы"
        job_id: Int!
    ): job_contacts
    "fetch data from the table: \"job_description_english\""
    job_description_english(
        "distinct select on columns"
        distinct_on: [job_description_english_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [job_description_english_order_by!],
        "filter the rows returned"
        where: job_description_english_bool_exp
    ): [job_description_english!]!
    "fetch data from the table: \"job_description_english\" using primary key columns"
    job_description_english_by_pk(
        "Идентификатор работы"
        job_id: Int!
    ): job_description_english
    "fetch data from the table: \"job_description_russian\""
    job_description_russian(
        "distinct select on columns"
        distinct_on: [job_description_russian_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [job_description_russian_order_by!],
        "filter the rows returned"
        where: job_description_russian_bool_exp
    ): [job_description_russian!]!
    "fetch data from the table: \"job_description_russian\" using primary key columns"
    job_description_russian_by_pk(
        "Идентификатор работы"
        job_id: Int!
    ): job_description_russian
    "execute function \"job_paginate\" which returns \"job\""
    job_paginate(
        "input parameters for function \"job_paginate\""
        args: job_paginate_args!,
        "distinct select on columns"
        distinct_on: [job_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [job_order_by!],
        "filter the rows returned"
        where: job_bool_exp
    ): [job!]!
    "execute function \"job_recent\" which returns \"job\""
    job_recent(
        "input parameters for function \"job_recent\""
        args: job_recent_args!,
        "distinct select on columns"
        distinct_on: [job_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [job_order_by!],
        "filter the rows returned"
        where: job_bool_exp
    ): [job!]!
    "fetch data from the table: \"job_skills\""
    job_skills(
        "distinct select on columns"
        distinct_on: [job_skills_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [job_skills_order_by!],
        "filter the rows returned"
        where: job_skills_bool_exp
    ): [job_skills!]!
    "fetch data from the table: \"job_skills\" using primary key columns"
    job_skills_by_pk(
        "Идентификатор работы"
        job_id: Int!
    ): job_skills
    "An array relationship"
    job_tags(
        "distinct select on columns"
        distinct_on: [job_tags_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [job_tags_order_by!],
        "filter the rows returned"
        where: job_tags_bool_exp
    ): [job_tags!]!
}

type subscription_root {
    "fetch data from the table: \"country\""
    country(
        "distinct select on columns"
        distinct_on: [country_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [country_order_by!],
        "filter the rows returned"
        where: country_bool_exp
    ): [country!]!
    "fetch data from the table: \"country\" using primary key columns"
    country_by_pk(
        "Идентификатор страны"
        id: Int!
    ): country
    "fetch data from the table: \"job\""
    job(
        "distinct select on columns"
        distinct_on: [job_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [job_order_by!],
        "filter the rows returned"
        where: job_bool_exp
    ): [job!]!
    "fetch data from the table: \"job\" using primary key columns"
    job_by_pk(
        "Идентификатор элемента"
        id: Int!
    ): job
    "fetch data from the table: \"job_contacts\""
    job_contacts(
        "distinct select on columns"
        distinct_on: [job_contacts_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [job_contacts_order_by!],
        "filter the rows returned"
        where: job_contacts_bool_exp
    ): [job_contacts!]!
    "fetch data from the table: \"job_contacts\" using primary key columns"
    job_contacts_by_pk(
        "Идентификатор работы"
        job_id: Int!
    ): job_contacts
    "fetch data from the table: \"job_description_english\""
    job_description_english(
        "distinct select on columns"
        distinct_on: [job_description_english_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [job_description_english_order_by!],
        "filter the rows returned"
        where: job_description_english_bool_exp
    ): [job_description_english!]!
    "fetch data from the table: \"job_description_english\" using primary key columns"
    job_description_english_by_pk(
        "Идентификатор работы"
        job_id: Int!
    ): job_description_english
    "fetch data from the table: \"job_description_russian\""
    job_description_russian(
        "distinct select on columns"
        distinct_on: [job_description_russian_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [job_description_russian_order_by!],
        "filter the rows returned"
        where: job_description_russian_bool_exp
    ): [job_description_russian!]!
    "fetch data from the table: \"job_description_russian\" using primary key columns"
    job_description_russian_by_pk(
        "Идентификатор работы"
        job_id: Int!
    ): job_description_russian
    "execute function \"job_paginate\" which returns \"job\""
    job_paginate(
        "input parameters for function \"job_paginate\""
        args: job_paginate_args!,
        "distinct select on columns"
        distinct_on: [job_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [job_order_by!],
        "filter the rows returned"
        where: job_bool_exp
    ): [job!]!
    "execute function \"job_recent\" which returns \"job\""
    job_recent(
        "input parameters for function \"job_recent\""
        args: job_recent_args!,
        "distinct select on columns"
        distinct_on: [job_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [job_order_by!],
        "filter the rows returned"
        where: job_bool_exp
    ): [job!]!
    "fetch data from the table: \"job_skills\""
    job_skills(
        "distinct select on columns"
        distinct_on: [job_skills_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [job_skills_order_by!],
        "filter the rows returned"
        where: job_skills_bool_exp
    ): [job_skills!]!
    "fetch data from the table: \"job_skills\" using primary key columns"
    job_skills_by_pk(
        "Идентификатор работы"
        job_id: Int!
    ): job_skills
    "An array relationship"
    job_tags(
        "distinct select on columns"
        distinct_on: [job_tags_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [job_tags_order_by!],
        "filter the rows returned"
        where: job_tags_bool_exp
    ): [job_tags!]!
}

"select columns of table \"country\""
enum country_select_column {
    "column name"
    code
    "column name"
    id
    "column name"
    latitude
    "column name"
    longitude
    "column name"
    title
}

"unique or primary key constraints on table \"job\""
enum job_constraint {
    "unique or primary key constraint"
    job_pkey
}

"unique or primary key constraints on table \"job_contacts\""
enum job_contacts_constraint {
    "unique or primary key constraint"
    job_contacts_pk
}

"select columns of table \"job_contacts\""
enum job_contacts_select_column {
    "column name"
    contacts
    "column name"
    job_id
}

"update columns of table \"job_contacts\""
enum job_contacts_update_column {
    "column name"
    contacts
    "column name"
    job_id
}

"unique or primary key constraints on table \"job_description_english\""
enum job_description_english_constraint {
    "unique or primary key constraint"
    job_description_english_pk
}

"select columns of table \"job_description_english\""
enum job_description_english_select_column {
    "column name"
    description
    "column name"
    job_id
}

"update columns of table \"job_description_english\""
enum job_description_english_update_column {
    "column name"
    description
    "column name"
    job_id
}

"unique or primary key constraints on table \"job_description_russian\""
enum job_description_russian_constraint {
    "unique or primary key constraint"
    job_description_russian_pk
}

"select columns of table \"job_description_russian\""
enum job_description_russian_select_column {
    "column name"
    description
    "column name"
    job_id
}

"update columns of table \"job_description_russian\""
enum job_description_russian_update_column {
    "column name"
    description
    "column name"
    job_id
}

"select columns of table \"job\""
enum job_select_column {
    "column name"
    address
    "column name"
    company
    "column name"
    country_code
    "column name"
    created
    "column name"
    creator_id
    "column name"
    deletion_mark
    "column name"
    employments
    "column name"
    id
    "column name"
    levels
    "column name"
    relocation
    "column name"
    remote
    "column name"
    title
    "column name"
    updated
}

"unique or primary key constraints on table \"job_skills\""
enum job_skills_constraint {
    "unique or primary key constraint"
    job_skills_pk
}

"select columns of table \"job_skills\""
enum job_skills_select_column {
    "column name"
    job_id
    "column name"
    skills
}

"update columns of table \"job_skills\""
enum job_skills_update_column {
    "column name"
    job_id
    "column name"
    skills
}

"unique or primary key constraints on table \"job_tags\""
enum job_tags_constraint {
    "unique or primary key constraint"
    job_tags_job_id_idx
}

"select columns of table \"job_tags\""
enum job_tags_select_column {
    "column name"
    job_id
    "column name"
    tag
}

"update columns of table \"job_tags\""
enum job_tags_update_column {
    "column name"
    job_id
    "column name"
    tag
}

"update columns of table \"job\""
enum job_update_column {
    "column name"
    address
    "column name"
    company
    "column name"
    country_code
    "column name"
    deletion_mark
    "column name"
    employments
    "column name"
    levels
    "column name"
    relocation
    "column name"
    remote
    "column name"
    title
}

"column ordering options"
enum order_by {
    "in ascending order, nulls last"
    asc
    "in ascending order, nulls first"
    asc_nulls_first
    "in ascending order, nulls last"
    asc_nulls_last
    "in descending order, nulls first"
    desc
    "in descending order, nulls first"
    desc_nulls_first
    "in descending order, nulls last"
    desc_nulls_last
}

scalar _employment

scalar _int4

scalar _level

scalar _text

scalar bpchar

scalar employment

scalar level

scalar relocation

scalar timestamp

"Boolean expression to compare columns of type \"Boolean\". All fields are combined with logical 'AND'."
input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}

"Boolean expression to compare columns of type \"Float\". All fields are combined with logical 'AND'."
input Float_comparison_exp {
    _eq: Float
    _gt: Float
    _gte: Float
    _in: [Float!]
    _is_null: Boolean
    _lt: Float
    _lte: Float
    _neq: Float
    _nin: [Float!]
}

"Boolean expression to compare columns of type \"Int\". All fields are combined with logical 'AND'."
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}

"Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    "does the column match the given case-insensitive pattern"
    _ilike: String
    _in: [String!]
    "does the column match the given POSIX regular expression, case insensitive"
    _iregex: String
    _is_null: Boolean
    "does the column match the given pattern"
    _like: String
    _lt: String
    _lte: String
    _neq: String
    "does the column NOT match the given case-insensitive pattern"
    _nilike: String
    _nin: [String!]
    "does the column NOT match the given POSIX regular expression, case insensitive"
    _niregex: String
    "does the column NOT match the given pattern"
    _nlike: String
    "does the column NOT match the given POSIX regular expression, case sensitive"
    _nregex: String
    "does the column NOT match the given SQL regular expression"
    _nsimilar: String
    "does the column match the given POSIX regular expression, case sensitive"
    _regex: String
    "does the column match the given SQL regular expression"
    _similar: String
}

"Boolean expression to compare columns of type \"_employment\". All fields are combined with logical 'AND'."
input _employment_comparison_exp {
    _eq: _employment
    _gt: _employment
    _gte: _employment
    _in: [_employment!]
    _is_null: Boolean
    _lt: _employment
    _lte: _employment
    _neq: _employment
    _nin: [_employment!]
}

"Boolean expression to compare columns of type \"_level\". All fields are combined with logical 'AND'."
input _level_comparison_exp {
    _eq: _level
    _gt: _level
    _gte: _level
    _in: [_level!]
    _is_null: Boolean
    _lt: _level
    _lte: _level
    _neq: _level
    _nin: [_level!]
}

"Boolean expression to compare columns of type \"_text\". All fields are combined with logical 'AND'."
input _text_comparison_exp {
    _eq: _text
    _gt: _text
    _gte: _text
    _in: [_text!]
    _is_null: Boolean
    _lt: _text
    _lte: _text
    _neq: _text
    _nin: [_text!]
}

"Boolean expression to compare columns of type \"bpchar\". All fields are combined with logical 'AND'."
input bpchar_comparison_exp {
    _eq: bpchar
    _gt: bpchar
    _gte: bpchar
    "does the column match the given case-insensitive pattern"
    _ilike: bpchar
    _in: [bpchar!]
    "does the column match the given POSIX regular expression, case insensitive"
    _iregex: bpchar
    _is_null: Boolean
    "does the column match the given pattern"
    _like: bpchar
    _lt: bpchar
    _lte: bpchar
    _neq: bpchar
    "does the column NOT match the given case-insensitive pattern"
    _nilike: bpchar
    _nin: [bpchar!]
    "does the column NOT match the given POSIX regular expression, case insensitive"
    _niregex: bpchar
    "does the column NOT match the given pattern"
    _nlike: bpchar
    "does the column NOT match the given POSIX regular expression, case sensitive"
    _nregex: bpchar
    "does the column NOT match the given SQL regular expression"
    _nsimilar: bpchar
    "does the column match the given POSIX regular expression, case sensitive"
    _regex: bpchar
    "does the column match the given SQL regular expression"
    _similar: bpchar
}

"Boolean expression to filter rows from the table \"country\". All fields are combined with a logical 'AND'."
input country_bool_exp {
    _and: [country_bool_exp!]
    _not: country_bool_exp
    _or: [country_bool_exp!]
    code: bpchar_comparison_exp
    id: Int_comparison_exp
    latitude: Float_comparison_exp
    longitude: Float_comparison_exp
    title: String_comparison_exp
}

"Ordering options when selecting data from \"country\"."
input country_order_by {
    code: order_by
    id: order_by
    latitude: order_by
    longitude: order_by
    title: order_by
}

"Boolean expression to filter rows from the table \"job\". All fields are combined with a logical 'AND'."
input job_bool_exp {
    _and: [job_bool_exp!]
    _not: job_bool_exp
    _or: [job_bool_exp!]
    address: String_comparison_exp
    company: String_comparison_exp
    country: country_bool_exp
    country_code: bpchar_comparison_exp
    created: timestamp_comparison_exp
    creator_id: String_comparison_exp
    deletion_mark: Boolean_comparison_exp
    description_english: job_description_english_bool_exp
    description_russian: job_description_russian_bool_exp
    employments: _employment_comparison_exp
    id: Int_comparison_exp
    job_contacts: job_contacts_bool_exp
    job_skills: job_skills_bool_exp
    job_tags: job_tags_bool_exp
    levels: _level_comparison_exp
    relocation: relocation_comparison_exp
    remote: Boolean_comparison_exp
    title: String_comparison_exp
    updated: timestamp_comparison_exp
}

"Boolean expression to filter rows from the table \"job_contacts\". All fields are combined with a logical 'AND'."
input job_contacts_bool_exp {
    _and: [job_contacts_bool_exp!]
    _not: job_contacts_bool_exp
    _or: [job_contacts_bool_exp!]
    contacts: _text_comparison_exp
    job: job_bool_exp
    job_id: Int_comparison_exp
}

"input type for incrementing numeric columns in table \"job_contacts\""
input job_contacts_inc_input {
    "Идентификатор работы"
    job_id: Int
}

"input type for inserting data into table \"job_contacts\""
input job_contacts_insert_input {
    "Контакты для обратной связи"
    contacts: _text
    job: job_obj_rel_insert_input
    "Идентификатор работы"
    job_id: Int
}

"input type for inserting object relation for remote table \"job_contacts\""
input job_contacts_obj_rel_insert_input {
    data: job_contacts_insert_input!
    "on conflict condition"
    on_conflict: job_contacts_on_conflict
}

"on conflict condition type for table \"job_contacts\""
input job_contacts_on_conflict {
    constraint: job_contacts_constraint!
    update_columns: [job_contacts_update_column!]! = []
    where: job_contacts_bool_exp
}

"Ordering options when selecting data from \"job_contacts\"."
input job_contacts_order_by {
    contacts: order_by
    job: job_order_by
    job_id: order_by
}

"primary key columns input for table: job_contacts"
input job_contacts_pk_columns_input {
    "Идентификатор работы"
    job_id: Int!
}

"input type for updating data in table \"job_contacts\""
input job_contacts_set_input {
    "Контакты для обратной связи"
    contacts: _text
    "Идентификатор работы"
    job_id: Int
}

"Boolean expression to filter rows from the table \"job_description_english\". All fields are combined with a logical 'AND'."
input job_description_english_bool_exp {
    _and: [job_description_english_bool_exp!]
    _not: job_description_english_bool_exp
    _or: [job_description_english_bool_exp!]
    description: String_comparison_exp
    job: job_bool_exp
    job_id: Int_comparison_exp
}

"input type for incrementing numeric columns in table \"job_description_english\""
input job_description_english_inc_input {
    "Идентификатор работы"
    job_id: Int
}

"input type for inserting data into table \"job_description_english\""
input job_description_english_insert_input {
    "Описание"
    description: String
    job: job_obj_rel_insert_input
    "Идентификатор работы"
    job_id: Int
}

"input type for inserting object relation for remote table \"job_description_english\""
input job_description_english_obj_rel_insert_input {
    data: job_description_english_insert_input!
    "on conflict condition"
    on_conflict: job_description_english_on_conflict
}

"on conflict condition type for table \"job_description_english\""
input job_description_english_on_conflict {
    constraint: job_description_english_constraint!
    update_columns: [job_description_english_update_column!]! = []
    where: job_description_english_bool_exp
}

"Ordering options when selecting data from \"job_description_english\"."
input job_description_english_order_by {
    description: order_by
    job: job_order_by
    job_id: order_by
}

"primary key columns input for table: job_description_english"
input job_description_english_pk_columns_input {
    "Идентификатор работы"
    job_id: Int!
}

"input type for updating data in table \"job_description_english\""
input job_description_english_set_input {
    "Описание"
    description: String
    "Идентификатор работы"
    job_id: Int
}

"Boolean expression to filter rows from the table \"job_description_russian\". All fields are combined with a logical 'AND'."
input job_description_russian_bool_exp {
    _and: [job_description_russian_bool_exp!]
    _not: job_description_russian_bool_exp
    _or: [job_description_russian_bool_exp!]
    description: String_comparison_exp
    job: job_bool_exp
    job_id: Int_comparison_exp
}

"input type for incrementing numeric columns in table \"job_description_russian\""
input job_description_russian_inc_input {
    "Идентификатор работы"
    job_id: Int
}

"input type for inserting data into table \"job_description_russian\""
input job_description_russian_insert_input {
    "Описание"
    description: String
    job: job_obj_rel_insert_input
    "Идентификатор работы"
    job_id: Int
}

"input type for inserting object relation for remote table \"job_description_russian\""
input job_description_russian_obj_rel_insert_input {
    data: job_description_russian_insert_input!
    "on conflict condition"
    on_conflict: job_description_russian_on_conflict
}

"on conflict condition type for table \"job_description_russian\""
input job_description_russian_on_conflict {
    constraint: job_description_russian_constraint!
    update_columns: [job_description_russian_update_column!]! = []
    where: job_description_russian_bool_exp
}

"Ordering options when selecting data from \"job_description_russian\"."
input job_description_russian_order_by {
    description: order_by
    job: job_order_by
    job_id: order_by
}

"primary key columns input for table: job_description_russian"
input job_description_russian_pk_columns_input {
    "Идентификатор работы"
    job_id: Int!
}

"input type for updating data in table \"job_description_russian\""
input job_description_russian_set_input {
    "Описание"
    description: String
    "Идентификатор работы"
    job_id: Int
}

"input type for inserting data into table \"job\""
input job_insert_input {
    "Местоположение, например: Moscow"
    address: String
    "Компания"
    company: String
    "Код страны"
    country_code: bpchar
    description_english: job_description_english_obj_rel_insert_input
    description_russian: job_description_russian_obj_rel_insert_input
    "Трудоустройство, занятость"
    employments: _employment
    job_contacts: job_contacts_obj_rel_insert_input
    job_skills: job_skills_obj_rel_insert_input
    job_tags: job_tags_arr_rel_insert_input
    "Уровни разработчика"
    levels: _level
    "Релокация"
    relocation: relocation
    "Удаленная"
    remote: Boolean
    "Имя вакансии"
    title: String
}

"input type for inserting object relation for remote table \"job\""
input job_obj_rel_insert_input {
    data: job_insert_input!
    "on conflict condition"
    on_conflict: job_on_conflict
}

"on conflict condition type for table \"job\""
input job_on_conflict {
    constraint: job_constraint!
    update_columns: [job_update_column!]! = []
    where: job_bool_exp
}

"Ordering options when selecting data from \"job\"."
input job_order_by {
    address: order_by
    company: order_by
    country: country_order_by
    country_code: order_by
    created: order_by
    creator_id: order_by
    deletion_mark: order_by
    description_english: job_description_english_order_by
    description_russian: job_description_russian_order_by
    employments: order_by
    id: order_by
    job_contacts: job_contacts_order_by
    job_skills: job_skills_order_by
    job_tags_aggregate: job_tags_aggregate_order_by
    levels: order_by
    relocation: order_by
    remote: order_by
    title: order_by
    updated: order_by
}

input job_paginate_args {
    filter_before: timestamp
    filter_country: String
    filter_employment: employment
    filter_exclude: _int4
    filter_level: level
    filter_limit: Int
    filter_relocation: Boolean
    filter_remote: Boolean
}

"primary key columns input for table: job"
input job_pk_columns_input {
    "Идентификатор элемента"
    id: Int!
}

input job_recent_args {
    filter_after: timestamp
    filter_country: String
    filter_employment: employment
    filter_exclude: _int4
    filter_level: level
    filter_limit: Int
    filter_relocation: Boolean
    filter_remote: Boolean
}

"input type for updating data in table \"job\""
input job_set_input {
    "Местоположение, например: Moscow"
    address: String
    "Компания"
    company: String
    "Код страны"
    country_code: bpchar
    "Пометка на удаление"
    deletion_mark: Boolean
    "Трудоустройство, занятость"
    employments: _employment
    "Уровни разработчика"
    levels: _level
    "Релокация"
    relocation: relocation
    "Удаленная"
    remote: Boolean
    "Имя вакансии"
    title: String
}

"Boolean expression to filter rows from the table \"job_skills\". All fields are combined with a logical 'AND'."
input job_skills_bool_exp {
    _and: [job_skills_bool_exp!]
    _not: job_skills_bool_exp
    _or: [job_skills_bool_exp!]
    job: job_bool_exp
    job_id: Int_comparison_exp
    skills: _text_comparison_exp
}

"input type for incrementing numeric columns in table \"job_skills\""
input job_skills_inc_input {
    "Идентификатор работы"
    job_id: Int
}

"input type for inserting data into table \"job_skills\""
input job_skills_insert_input {
    job: job_obj_rel_insert_input
    "Идентификатор работы"
    job_id: Int
    "Навыки (Skills)"
    skills: _text
}

"input type for inserting object relation for remote table \"job_skills\""
input job_skills_obj_rel_insert_input {
    data: job_skills_insert_input!
    "on conflict condition"
    on_conflict: job_skills_on_conflict
}

"on conflict condition type for table \"job_skills\""
input job_skills_on_conflict {
    constraint: job_skills_constraint!
    update_columns: [job_skills_update_column!]! = []
    where: job_skills_bool_exp
}

"Ordering options when selecting data from \"job_skills\"."
input job_skills_order_by {
    job: job_order_by
    job_id: order_by
    skills: order_by
}

"primary key columns input for table: job_skills"
input job_skills_pk_columns_input {
    "Идентификатор работы"
    job_id: Int!
}

"input type for updating data in table \"job_skills\""
input job_skills_set_input {
    "Идентификатор работы"
    job_id: Int
    "Навыки (Skills)"
    skills: _text
}

"order by aggregate values of table \"job_tags\""
input job_tags_aggregate_order_by {
    avg: job_tags_avg_order_by
    count: order_by
    max: job_tags_max_order_by
    min: job_tags_min_order_by
    stddev: job_tags_stddev_order_by
    stddev_pop: job_tags_stddev_pop_order_by
    stddev_samp: job_tags_stddev_samp_order_by
    sum: job_tags_sum_order_by
    var_pop: job_tags_var_pop_order_by
    var_samp: job_tags_var_samp_order_by
    variance: job_tags_variance_order_by
}

"input type for inserting array relation for remote table \"job_tags\""
input job_tags_arr_rel_insert_input {
    data: [job_tags_insert_input!]!
    "on conflict condition"
    on_conflict: job_tags_on_conflict
}

"order by avg() on columns of table \"job_tags\""
input job_tags_avg_order_by {
    "Идентификатор работы"
    job_id: order_by
}

"Boolean expression to filter rows from the table \"job_tags\". All fields are combined with a logical 'AND'."
input job_tags_bool_exp {
    _and: [job_tags_bool_exp!]
    _not: job_tags_bool_exp
    _or: [job_tags_bool_exp!]
    job: job_bool_exp
    job_id: Int_comparison_exp
    tag: String_comparison_exp
}

"input type for incrementing numeric columns in table \"job_tags\""
input job_tags_inc_input {
    "Идентификатор работы"
    job_id: Int
}

"input type for inserting data into table \"job_tags\""
input job_tags_insert_input {
    job: job_obj_rel_insert_input
    "Идентификатор работы"
    job_id: Int
    "Тэг"
    tag: String
}

"order by max() on columns of table \"job_tags\""
input job_tags_max_order_by {
    "Идентификатор работы"
    job_id: order_by
    "Тэг"
    tag: order_by
}

"order by min() on columns of table \"job_tags\""
input job_tags_min_order_by {
    "Идентификатор работы"
    job_id: order_by
    "Тэг"
    tag: order_by
}

"on conflict condition type for table \"job_tags\""
input job_tags_on_conflict {
    constraint: job_tags_constraint!
    update_columns: [job_tags_update_column!]! = []
    where: job_tags_bool_exp
}

"Ordering options when selecting data from \"job_tags\"."
input job_tags_order_by {
    job: job_order_by
    job_id: order_by
    tag: order_by
}

"input type for updating data in table \"job_tags\""
input job_tags_set_input {
    "Идентификатор работы"
    job_id: Int
    "Тэг"
    tag: String
}

"order by stddev() on columns of table \"job_tags\""
input job_tags_stddev_order_by {
    "Идентификатор работы"
    job_id: order_by
}

"order by stddev_pop() on columns of table \"job_tags\""
input job_tags_stddev_pop_order_by {
    "Идентификатор работы"
    job_id: order_by
}

"order by stddev_samp() on columns of table \"job_tags\""
input job_tags_stddev_samp_order_by {
    "Идентификатор работы"
    job_id: order_by
}

"order by sum() on columns of table \"job_tags\""
input job_tags_sum_order_by {
    "Идентификатор работы"
    job_id: order_by
}

"order by var_pop() on columns of table \"job_tags\""
input job_tags_var_pop_order_by {
    "Идентификатор работы"
    job_id: order_by
}

"order by var_samp() on columns of table \"job_tags\""
input job_tags_var_samp_order_by {
    "Идентификатор работы"
    job_id: order_by
}

"order by variance() on columns of table \"job_tags\""
input job_tags_variance_order_by {
    "Идентификатор работы"
    job_id: order_by
}

"Boolean expression to compare columns of type \"relocation\". All fields are combined with logical 'AND'."
input relocation_comparison_exp {
    _eq: relocation
    _gt: relocation
    _gte: relocation
    _in: [relocation!]
    _is_null: Boolean
    _lt: relocation
    _lte: relocation
    _neq: relocation
    _nin: [relocation!]
}

"Boolean expression to compare columns of type \"timestamp\". All fields are combined with logical 'AND'."
input timestamp_comparison_exp {
    _eq: timestamp
    _gt: timestamp
    _gte: timestamp
    _in: [timestamp!]
    _is_null: Boolean
    _lt: timestamp
    _lte: timestamp
    _neq: timestamp
    _nin: [timestamp!]
}
